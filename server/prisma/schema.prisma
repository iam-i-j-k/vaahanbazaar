// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========================
// User model
// ========================
model User {
  id         String       @id @map("_id") @default(auto()) @db.ObjectId
  name       String?
  email      String       @unique
  password   String
  role       String       @default("user")
  createdAt  DateTime     @default(now())

  bookings    Booking[]
  reviews     Review[]
  favorites   Favorite[]
  priceAlerts PriceAlert[]
}

// ========================
// Dealer model
// ========================
model Dealer {
  id        String    @id @map("_id") @default(auto()) @db.ObjectId
  name      String
  phone     String?
  email     String?
  address   String?
  city      String?
  createdAt DateTime  @default(now())

  listings  Listing[]
  bookings  Booking[]
}

// ========================
// Vehicle Model
// ========================
model VehicleModel {
  id          String       @id @map("_id") @default(auto()) @db.ObjectId
  brand       String
  modelName   String
  category    String?
  fuelType    String?
  price       Float?
  mileage     Float?
  engineCC    Int?
  batteryKwh  Float?
  launchDate  DateTime?
  description String?

  listings    Listing[]
  reviews     Review[]
  favorites   Favorite[]
  priceAlerts PriceAlert[]
}

// ========================
// Listing model (New/Used bikes)
// ========================
model Listing {
  id         String    @id @map("_id") @default(auto()) @db.ObjectId
  modelId    String
  dealerId   String
  listingType String   @default("new")
  condition  String?
  year       Int?
  kms        Int?
  price      Float?
  stockCount Int       @default(1)
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())

  model      VehicleModel @relation(fields: [modelId], references: [id])
  dealer     Dealer       @relation(fields: [dealerId], references: [id])
  images     Image[]
  bookings   Booking[]
}

// ========================
// Image model
// ========================
model Image {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  listingId String
  url       String
  position  Int      @default(0)

  listing   Listing  @relation(fields: [listingId], references: [id])
}

// ========================
// Booking model (Test Rides)
// ========================
model Booking {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  listingId    String
  userId       String
  dealerId     String
  appointmentTs DateTime
  status       String   @default("pending")
  createdAt    DateTime @default(now())

  listing Listing @relation(fields: [listingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  dealer  Dealer  @relation(fields: [dealerId], references: [id])
}

// ========================
// Review model
// ========================
model Review {
  id        String       @id @map("_id") @default(auto()) @db.ObjectId
  userId    String
  modelId   String
  rating    Int
  comment   String?
  createdAt DateTime     @default(now())

  user      User         @relation(fields: [userId], references: [id])
  model     VehicleModel @relation(fields: [modelId], references: [id])
}

// ========================
// Favorite model
// ========================
model Favorite {
  id        String       @id @map("_id") @default(auto()) @db.ObjectId
  userId    String
  modelId   String
  addedAt   DateTime     @default(now())

  user      User         @relation(fields: [userId], references: [id])
  model     VehicleModel @relation(fields: [modelId], references: [id])

  @@unique([userId, modelId])
}

// ========================
// Price Alert model
// ========================
model PriceAlert {
  id          String       @id @map("_id") @default(auto()) @db.ObjectId
  userId      String
  modelId     String
  targetPrice Float
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id])
  model       VehicleModel @relation(fields: [modelId], references: [id])
}
